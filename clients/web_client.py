from flask import Flask, request, redirect, url_for, session, render_template_string
import requests
import secrets
import hashlib
import base64
import time
import json

app = Flask(__name__)
app.secret_key = secrets.token_hex(16)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
AUTH_SERVER = "http://127.0.0.1:5000"
CLIENT_ID = "web_app"
REDIRECT_URI = "http://127.0.0.1:5003/callback"

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ PKCE –¥–∞–Ω–Ω—ã—Ö
pkce_store = {}

# HTML —à–∞–±–ª–æ–Ω—ã
SCOPE_SELECTION_TEMPLATE = """
<!DOCTYPE html>
<html>
<head>
    <title>OAuth Client</title>
    <meta charset="utf-8">
    <style>
        body { 
            font-family: -apple-system, BlinkMacSystemFont, sans-serif;
            max-width: 500px; 
            margin: 50px auto; 
            padding: 20px;
            background: #f5f5f5;
        }
        .container {
            background: white;
            padding: 30px;
            border-radius: 12px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        }
        h2 {
            color: #333;
            text-align: center;
            margin-bottom: 30px;
        }
        .scope-item {
            margin: 15px 0;
            padding: 15px;
            background: #f8f9fa;
            border-radius: 8px;
            border-left: 4px solid #007bff;
        }
        label {
            display: flex;
            align-items: center;
            cursor: pointer;
        }
        input[type="checkbox"] {
            margin-right: 12px;
            transform: scale(1.2);
        }
        button { 
            background: #007bff; 
            color: white; 
            padding: 15px 30px; 
            border: none; 
            border-radius: 8px; 
            cursor: pointer;
            font-size: 16px;
            width: 100%;
            margin-top: 20px;
        }
        button:hover {
            background: #0056b3;
        }
    </style>
</head>
<body>
    <div class="container">
        <h2>üîê –í—ã–±–æ—Ä –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞</h2>

        <form method="post" action="/request_auth">
            <div class="scope-item">
                <label>
                    <input type="checkbox" name="scope" value="read_data" checked>
                    üìñ –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                </label>
            </div>

            <div class="scope-item">
                <label>
                    <input type="checkbox" name="scope" value="write_data">
                    ‚úèÔ∏è –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö
                </label>
            </div>

            <div class="scope-item">
                <label>
                    <input type="checkbox" name="scope" value="admin_panel">
                    ‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
                </label>
            </div>

            <button type="submit">–í–æ–π—Ç–∏ ‚Üí</button>
        </form>
    </div>
</body>
</html>
"""

DASHBOARD_TEMPLATE = """
<!DOCTYPE html>
<html>
<head>
    <title>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</title>
    <meta charset="utf-8">
    <style>
        body { 
            font-family: -apple-system, BlinkMacSystemFont, sans-serif;
            max-width: 600px; 
            margin: 50px auto; 
            padding: 20px;
            background: #f5f5f5;
        }
        .container {
            background: white;
            padding: 30px;
            border-radius: 12px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        }
        .card {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 8px;
            margin: 20px 0;
        }
        .user-card {
            border-left: 4px solid #28a745;
        }
        .scopes-card {
            border-left: 4px solid #007bff;
        }
        .scope-item {
            margin: 8px 0;
            padding: 10px;
            background: white;
            border-radius: 6px;
            border-left: 3px solid #6c757d;
        }
        .scope-active {
            border-left-color: #28a745;
            background: #f0fff4;
        }
        .scope-inactive {
            border-left-color: #dc3545;
            background: #fff5f5;
            opacity: 0.6;
        }
        button {
            background: #dc3545;
            color: white;
            padding: 12px 24px;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            margin-top: 20px;
        }
        button:hover {
            background: #c82333;
        }
        .badge {
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 12px;
            margin-left: 10px;
        }
        .badge-success {
            background: #28a745;
            color: white;
        }
        .badge-danger {
            background: #dc3545;
            color: white;
        }
    </style>
</head>
<body>
    <div class="container">
        <h2>üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</h2>

        <div class="card user-card">
            <h3>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
            <p><strong>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</strong> {{ user_id }}</p>
            <p><strong>–°—Ç–∞—Ç—É—Å:</strong> 
                {% if 'admin_panel' in granted_scope %}
                <span class="badge badge-success">–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</span>
                {% else %}
                <span class="badge">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</span>
                {% endif %}
            </p>
        </div>

        <div class="card scopes-card">
            <h3>üîê –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞</h3>

            <div class="scope-item {% if 'read_data' in granted_scope %}scope-active{% else %}scope-inactive{% endif %}">
                üìñ –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                {% if 'read_data' in granted_scope %}
                <span class="badge badge-success">–î–æ—Å—Ç—É–ø–Ω–æ</span>
                {% else %}
                <span class="badge badge-danger">–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ</span>
                {% endif %}
            </div>

            <div class="scope-item {% if 'write_data' in granted_scope %}scope-active{% else %}scope-inactive{% endif %}">
                ‚úèÔ∏è –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö
                {% if 'write_data' in granted_scope %}
                <span class="badge badge-success">–î–æ—Å—Ç—É–ø–Ω–æ</span>
                {% else %}
                <span class="badge badge-danger">–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ</span>
                {% endif %}
            </div>

            <div class="scope-item {% if 'admin_panel' in granted_scope %}scope-active{% else %}scope-inactive{% endif %}">
                ‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
                {% if 'admin_panel' in granted_scope %}
                <span class="badge badge-success">–î–æ—Å—Ç—É–ø–Ω–æ</span>
                {% else %}
                <span class="badge badge-danger">–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ</span>
                {% endif %}
            </div>
        </div>

        <div class="card">
            <h3>‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Å—Å–∏–∏</h3>
            <p><strong>–¢–æ–∫–µ–Ω:</strong> {{ access_token[:20] }}... (—Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –ø–∞–º—è—Ç–∏)</p>
            <p><strong>–ö–ª–∏–µ–Ω—Ç:</strong> Public (–±–µ–∑ client_secret)</p>
            <p><strong>–ó–∞—â–∏—Ç–∞:</strong> PKCE</p>
        </div>

        <form method="post" action="/logout">
            <button type="submit">üö™ –í—ã–π—Ç–∏</button>
        </form>
    </div>
</body>
</html>
"""


def generate_code_verifier():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è code_verifier –¥–ª—è PKCE"""
    return secrets.token_urlsafe(32)


def generate_code_challenge(verifier):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è code_challenge –¥–ª—è PKCE"""
    digest = hashlib.sha256(verifier.encode()).digest()
    return base64.urlsafe_b64encode(digest).decode().replace('=', '')


@app.route("/")
def home():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    session.clear()
    return render_template_string(SCOPE_SELECTION_TEMPLATE)


@app.route("/request_auth", methods=["POST"])
def request_auth():
    """–ó–∞–ø—Ä–æ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å PKCE"""
    requested_scopes = request.form.getlist("scope")
    requested_scope = " ".join(requested_scopes) if requested_scopes else "read_data"

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PKCE
    code_verifier = generate_code_verifier()
    code_challenge = generate_code_challenge(code_verifier)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    session_id = secrets.token_urlsafe(16)
    pkce_store[session_id] = {
        "code_verifier": code_verifier,
        "requested_scope": requested_scope,
        "created_at": time.time()
    }

    session["pkce_session_id"] = session_id

    # URL –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    auth_url = (
        f"{AUTH_SERVER}/authorize?"
        f"response_type=code&"
        f"client_id={CLIENT_ID}&"
        f"redirect_uri={REDIRECT_URI}&"
        f"scope={requested_scope}&"
        f"code_challenge={code_challenge}&"
        f"code_challenge_method=S256"
    )

    return redirect(auth_url)


@app.route("/callback")
def callback():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    code = request.args.get("code")
    if not code:
        return "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", 400

    # –ü–æ–ª—É—á–∞–µ–º PKCE –¥–∞–Ω–Ω—ã–µ
    session_id = session.get("pkce_session_id")
    if not session_id or session_id not in pkce_store:
        return "‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞", 400

    pkce_data = pkce_store[session_id]
    code_verifier = pkce_data["code_verifier"]

    # –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    del pkce_store[session_id]
    session.pop("pkce_session_id", None)

    try:
        # –û–±–º–µ–Ω–∏–≤–∞–µ–º –∫–æ–¥ –Ω–∞ —Ç–æ–∫–µ–Ω
        token_response = requests.post(
            f"{AUTH_SERVER}/token",
            data={
                "grant_type": "authorization_code",
                "code": code,
                "client_id": CLIENT_ID,
                "redirect_uri": REDIRECT_URI,
                "code_verifier": code_verifier
            },
            timeout=10
        )

        if token_response.status_code != 200:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {token_response.text}", 400

        token_data = token_response.json()

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ —Ç–æ–∫–µ–Ω–∞
        (is_valid, token_info)=validate_token(token_data["access_token"])
        if not is_valid:
            return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞", 400


        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ—Å—Å–∏–∏ —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
        session["access_token"] = token_data["access_token"]
        session["user_id"] = token_info.get("user_id", "unknown")
        session["granted_scope"] = token_info.get("scope", [])

        return redirect(url_for("dashboard"))

    except requests.exceptions.RequestException as e:
        return f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}", 500


def validate_token(token):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    try:
        response = requests.post(
            f"{AUTH_SERVER}/verify_token",
            data={"token": token},
            timeout=3
        )
        return response.status_code == 200, response.json() if response.status_code == 200 else None
    except:
        return False, None


@app.route("/dashboard")
def dashboard():
    if "access_token" not in session:
        return redirect(url_for("home"))

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    is_valid, token_info = validate_token(session["access_token"])
    if not is_valid or not token_info.get("valid"):
        session.clear()
        return redirect(url_for("home"))

    return render_template_string(
        DASHBOARD_TEMPLATE,
        user_id=token_info.get("user_id", "unknown"),
        granted_scope=token_info.get("scope", []),
        access_token=session["access_token"]
    )


@app.route("/logout", methods=["POST"])
def logout():
    """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
    session.clear()
    return redirect(url_for("home"))


@app.before_request
def cleanup_pkce_store():
    """–û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö PKCE –¥–∞–Ω–Ω—ã—Ö"""
    current_time = time.time()
    for key in list(pkce_store.keys()):
        if current_time - pkce_store[key]["created_at"] > 300:  # 5 –º–∏–Ω—É—Ç
            del pkce_store[key]


if __name__ == "__main__":
    app.run(port=5003, debug=True)