#!/usr/bin/env python3
"""
OAuth 2.0 Web Client with JWT Support

–≠—Ç–æ—Ç –∫–ª–∏–µ–Ω—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π OAuth 2.0 Authorization Code Flow —Å PKCE,
JWT —Ç–æ–∫–µ–Ω–∞–º–∏ –∏ –∑–∞—â–∏—Ç–æ–π –æ—Ç CSRF —Å –ø–æ–º–æ—â—å—é state –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.

–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
- Authorization Code Flow —Å PKCE (RFC 7636)
- JWT access tokens –∏ refresh tokens
- –ó–∞—â–∏—Ç–∞ –æ—Ç CSRF —Å –ø–æ–º–æ—â—å—é state –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
- –í–∞–ª–∏–¥–∞—Ü–∏—è JWT –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
- –ü–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫

Endpoints:
- / - –í—ã–±–æ—Ä scope –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
- /request_auth - –ò–Ω–∏—Ü–∏–∞—Ü–∏—è OAuth flow
- /callback - –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –æ—Ç auth server
- /dashboard - –ó–∞—â–∏—â–µ–Ω–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- /refresh - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ access token
- /logout - –í—ã—Ö–æ–¥ –∏ –æ—Ç–∑—ã–≤ —Ç–æ–∫–µ–Ω–æ–≤
"""

import json
from flask import Flask, request, redirect, url_for, session, render_template_string
import requests
import secrets
import hashlib
import base64
import time
import jwt
import datetime
from typing import Dict, List, Optional, Tuple, Any

app = Flask(__name__)
app.secret_key = secrets.token_hex(16)

# =============================================================================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ö–õ–ò–ï–ù–¢–ê
# =============================================================================

# OAuth 2.0 –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
AUTH_SERVER = "http://127.0.0.1:5000"  # URL —Å–µ—Ä–≤–µ—Ä–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
CLIENT_ID = "web_app"  # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–ª–∏–µ–Ω—Ç–∞
CLIENT_SECRET = "web_secret_123"  # –°–µ–∫—Ä–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ (–¥–ª—è confidential client)
REDIRECT_URI = "http://127.0.0.1:5003/callback"  # URI –¥–ª—è callback

# JWT –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–¥–æ–ª–∂–Ω–∞ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å auth server)
JWT_CONFIG = {
    "algorithm": "HS256",  # –ê–ª–≥–æ—Ä–∏—Ç–º –ø–æ–¥–ø–∏—Å–∏ JWT
    "issuer": "oauth2-auth-server",  # Issuer claim
    "audience": "resource-server"  # Audience claim
}

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è PKCE –¥–∞–Ω–Ω—ã—Ö –∏ state
# –§–æ—Ä–º–∞—Ç: {session_id: {code_verifier, requested_scope, state, created_at}}
pkce_store: Dict[str, Dict[str, Any]] = {}


# =============================================================================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# =============================================================================

def generate_code_verifier() -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç cryptographically random code_verifier –¥–ª—è PKCE.

    Returns:
        str: –°–ª—É—á–∞–π–Ω–∞—è URL-safe —Å—Ç—Ä–æ–∫–∞ –¥–ª–∏–Ω–æ–π 43 —Å–∏–º–≤–æ–ª–∞
    """
    return secrets.token_urlsafe(32)


def generate_code_challenge(verifier: str) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç code_challenge –∏–∑ code_verifier –∏—Å–ø–æ–ª—å–∑—É—è SHA-256.

    Args:
        verifier: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π code_verifier

    Returns:
        str: Base64url-encoded SHA-256 —Ö—ç—à verifier
    """
    digest = hashlib.sha256(verifier.encode()).digest()
    return base64.urlsafe_b64encode(digest).decode().replace('=', '')


def generate_state_parameter() -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç cryptographically random state –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è CSRF –∑–∞—â–∏—Ç—ã.

    Returns:
        str: –°–ª—É—á–∞–π–Ω–∞—è URL-safe —Å—Ç—Ä–æ–∫–∞ –¥–ª–∏–Ω–æ–π 16 —Å–∏–º–≤–æ–ª–æ–≤
    """
    return secrets.token_urlsafe(16)


def validate_jwt_token(token: str) -> Tuple[bool, Optional[dict]]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç JWT —Ç–æ–∫–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ (–±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏, —Ç–æ–ª—å–∫–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞).

    Args:
        token: JWT —Ç–æ–∫–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

    Returns:
        Tuple[bool, Optional[dict]]:
            - True –∏ payload –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω
            - False –∏ error message –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω
    """
    try:
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º JWT –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        payload = jwt.decode(
            token,
            options={"verify_signature": False},
            algorithms=[JWT_CONFIG["algorithm"]]
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º expiration claim
        if "exp" in payload and payload["exp"] < datetime.datetime.utcnow().timestamp():
            return False, {"error": "Token expired"}

        return True, payload

    except jwt.InvalidTokenError as e:
        return False, {"error": f"Invalid token: {str(e)}"}


def refresh_access_token() -> bool:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç access token —Å –ø–æ–º–æ—â—å—é refresh token.

    Returns:
        bool: True –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    refresh_token = session.get("refresh_token")
    if not refresh_token:
        return False

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
        token_response = requests.post(
            f"{AUTH_SERVER}/token",
            data={
                "grant_type": "refresh_token",
                "refresh_token": refresh_token,
                "client_id": CLIENT_ID,
                "client_secret": CLIENT_SECRET
            },
            timeout=10
        )

        if token_response.status_code == 200:
            token_data = token_response.json()

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã –≤ —Å–µ—Å—Å–∏–∏
            session["access_token"] = token_data["access_token"]
            session["granted_scope"] = token_data.get("scope", "").split()

            # –û–±–Ω–æ–≤–ª—è–µ–º refresh token –µ—Å–ª–∏ –æ–Ω –±—ã–ª –≤–æ–∑–≤—Ä–∞—â–µ–Ω
            if "refresh_token" in token_data:
                session["refresh_token"] = token_data["refresh_token"]

            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ JWT payload
            is_valid, jwt_payload = validate_jwt_token(token_data["access_token"])
            if is_valid:
                session["user_id"] = jwt_payload.get("sub", "unknown")
                session["token_expiry"] = jwt_payload.get("exp", 0)

            return True
        else:
            return False

    except requests.exceptions.RequestException:
        return False


# =============================================================================
# HTML –®–ê–ë–õ–û–ù–´
# =============================================================================

SCOPE_SELECTION_TEMPLATE = """
<!DOCTYPE html>
<html>
<head>
    <title>OAuth Client - –í—ã–±–æ—Ä –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞</title>
    <meta charset="utf-8">
    <style>
        body { 
            font-family: -apple-system, BlinkMacSystemFont, sans-serif;
            max-width: 500px; 
            margin: 50px auto; 
            padding: 20px;
            background: #f5f5f5;
        }
        .container {
            background: white;
            padding: 30px;
            border-radius: 12px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        }
        h2 {
            color: #333;
            text-align: center;
            margin-bottom: 30px;
        }
        .scope-item {
            margin: 15px 0;
            padding: 15px;
            background: #f8f9fa;
            border-radius: 8px;
            border-left: 4px solid #007bff;
        }
        label {
            display: flex;
            align-items: center;
            cursor: pointer;
        }
        input[type="checkbox"] {
            margin-right: 12px;
            transform: scale(1.2);
        }
        button { 
            background: #007bff; 
            color: white; 
            padding: 15px 30px; 
            border: none; 
            border-radius: 8px; 
            cursor: pointer;
            font-size: 16px;
            width: 100%;
            margin-top: 20px;
        }
        button:hover {
            background: #0056b3;
        }
    </style>
</head>
<body>
    <div class="container">
        <h2>üîê –í—ã–±–æ—Ä –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞</h2>
        <p style="text-align: center; color: #666; margin-bottom: 30px;">
            –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        </p>

        <form method="post" action="/request_auth">
            <div class="scope-item">
                <label>
                    <input type="checkbox" name="scope" value="read_data" checked>
                    üìñ –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                </label>
            </div>

            <div class="scope-item">
                <label>
                    <input type="checkbox" name="scope" value="write_data">
                    ‚úèÔ∏è –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö
                </label>
            </div>

            <div class="scope-item">
                <label>
                    <input type="checkbox" name="scope" value="admin_panel">
                    ‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
                </label>
            </div>

            <button type="submit">–í–æ–π—Ç–∏ ‚Üí</button>
        </form>
    </div>
</body>
</html>
"""

DASHBOARD_TEMPLATE = """
<!DOCTYPE html>
<html>
<head>
    <title>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - OAuth Client</title>
    <meta charset="utf-8">
    <style>
        body { 
            font-family: -apple-system, BlinkMacSystemFont, sans-serif;
            max-width: 800px; 
            margin: 50px auto; 
            padding: 20px;
            background: #f5f5f5;
        }
        .container {
            background: white;
            padding: 30px;
            border-radius: 12px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        }
        .card {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 8px;
            margin: 20px 0;
        }
        .user-card {
            border-left: 4px solid #28a745;
        }
        .scopes-card {
            border-left: 4px solid #007bff;
        }
        .token-card {
            border-left: 4px solid #6f42c1;
        }
        .scope-item {
            margin: 8px 0;
            padding: 10px;
            background: white;
            border-radius: 6px;
            border-left: 3px solid #6c757d;
        }
        .scope-active {
            border-left-color: #28a745;
            background: #f0fff4;
        }
        .scope-inactive {
            border-left-color: #dc3545;
            background: #fff5f5;
            opacity: 0.6;
        }
        .token-info {
            font-family: monospace;
            font-size: 12px;
            word-break: break-all;
            background: #e9ecef;
            padding: 10px;
            border-radius: 4px;
            margin: 5px 0;
        }
        .btn {
            background: #007bff;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            margin: 5px;
            text-decoration: none;
            display: inline-block;
        }
        .btn-danger {
            background: #dc3545;
        }
        .btn-success {
            background: #28a745;
        }
        .btn:hover {
            opacity: 0.9;
        }
        .badge {
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 12px;
            margin-left: 10px;
        }
        .badge-success {
            background: #28a745;
            color: white;
        }
        .badge-warning {
            background: #ffc107;
            color: black;
        }
        .badge-danger {
            background: #dc3545;
            color: white;
        }
        .jwt-payload {
            background: #e9ecef;
            padding: 15px;
            border-radius: 6px;
            margin: 10px 0;
            font-family: monospace;
            font-size: 12px;
            max-height: 200px;
            overflow-y: auto;
        }
    </style>
</head>
<body>
    <div class="container">
        <h2>üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</h2>

        <div class="card user-card">
            <h3>üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</h3>
            <p><strong>üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</strong> {{ user_id }}</p>
            <p><strong>üè∑Ô∏è –°—Ç–∞—Ç—É—Å:</strong> 
                {% if 'admin_panel' in granted_scope %}
                <span class="badge badge-success">–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</span>
                {% else %}
                <span class="badge">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</span>
                {% endif %}
            </p>
            <p><strong>üîê –¢–∏–ø –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:</strong> 
                <span class="badge badge-success">JWT + Refresh Tokens</span>
            </p>
        </div>

        <div class="card scopes-card">
            <h3>üéØ –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (Scopes)</h3>

            <div class="scope-item {% if 'read_data' in granted_scope %}scope-active{% else %}scope-inactive{% endif %}">
                üìñ read_data
                {% if 'read_data' in granted_scope %}
                <span class="badge badge-success">–î–æ—Å—Ç—É–ø–Ω–æ</span>
                {% else %}
                <span class="badge badge-danger">–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ</span>
                {% endif %}
            </div>

            <div class="scope-item {% if 'write_data' in granted_scope %}scope-active{% else %}scope-inactive{% endif %}">
                ‚úèÔ∏è write_data
                {% if 'write_data' in granted_scope %}
                <span class="badge badge-success">–î–æ—Å—Ç—É–ø–Ω–æ</span>
                {% else %}
                <span class="badge badge-danger">–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ</span>
                {% endif %}
            </div>

            <div class="scope-item {% if 'admin_panel' in granted_scope %}scope-active{% else %}scope-inactive{% endif %}">
                ‚öôÔ∏è admin_panel
                {% if 'admin_panel' in granted_scope %}
                <span class="badge badge-success">–î–æ—Å—Ç—É–ø–Ω–æ</span>
                {% else %}
                <span class="badge badge-danger">–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ</span>
                {% endif %}
            </div>
        </div>

        <div class="card token-card">
            <h3>üîë JWT Access Token</h3>

            <div class="token-info">
                <strong>–ü–æ–ª–Ω—ã–π —Ç–æ–∫–µ–Ω:</strong><br>
                {{ access_token }}
            </div>

            <div class="token-info">
                <strong>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:</strong> 
                {% if token_expiry %}
                    {{ token_expiry }} –º–∏–Ω—É—Ç
                {% else %}
                    –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ
                {% endif %}
            </div>

            <h4>üìä JWT Payload:</h4>
            <div class="jwt-payload">
                {{ jwt_payload }}
            </div>
        </div>

        <div class="card token-card">
            <h3>üîÑ Refresh Token</h3>

            <div class="token-info">
                <strong>–¢–æ–∫–µ–Ω:</strong><br>
                {{ refresh_token }}
            </div>

            <div style="margin-top: 15px;">
                <a href="/refresh" class="btn btn-success">üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω</a>
            </div>
        </div>

        <div class="card">
            <h3>‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–µ–π</h3>

            <form method="post" action="/logout">
                <button type="submit" class="btn btn-danger">üö™ –í—ã–π—Ç–∏ (–û—Ç–æ–∑–≤–∞—Ç—å —Ç–æ–∫–µ–Ω—ã)</button>
            </form>
        </div>
    </div>
</body>
</html>
"""


# =============================================================================
# ROUTES - –û–°–ù–û–í–ù–´–ï –≠–ù–î–ü–û–ò–ù–¢–´
# =============================================================================

@app.route("/")
def home():
    """
    –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–ª–∏–µ–Ω—Ç–∞.

    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–æ—Ä–º—É –≤—ã–±–æ—Ä–∞ scope –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
    –û—á–∏—â–∞–µ—Ç —Å–µ—Å—Å–∏—é –ø—Ä–∏ –∫–∞–∂–¥–æ–º –ø–æ—Å–µ—â–µ–Ω–∏–∏.

    Returns:
        rendered template: HTML —Ñ–æ—Ä–º—É –≤—ã–±–æ—Ä–∞ scope
    """
    session.clear()
    return render_template_string(SCOPE_SELECTION_TEMPLATE)


@app.route("/request_auth", methods=["POST"])
def request_auth():
    """
    –ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç OAuth 2.0 Authorization Code flow —Å PKCE –∏ state.

    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç PKCE –ø–∞—Ä—É (code_verifier + code_challenge) –∏ state –ø–∞—Ä–∞–º–µ—Ç—Ä,
    –∑–∞—Ç–µ–º –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.

    Returns:
        redirect: –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ auth server —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    """
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º scopes
    requested_scopes = request.form.getlist("scope")
    requested_scope = " ".join(requested_scopes) if requested_scopes else "read_data"

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PKCE –ø–∞—Ä—É (code_verifier + code_challenge)
    code_verifier = generate_code_verifier()
    code_challenge = generate_code_challenge(code_verifier)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π state –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è CSRF –∑–∞—â–∏—Ç—ã
    state = generate_state_parameter()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ callback
    session_id = secrets.token_urlsafe(16)
    pkce_store[session_id] = {
        "code_verifier": code_verifier,
        "requested_scope": requested_scope,
        "state": state,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º state –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ callback
        "created_at": time.time()
    }

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    session["pkce_session_id"] = session_id

    # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–æ –≤—Å–µ–º–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    auth_url = (
        f"{AUTH_SERVER}/authorize?"
        f"response_type=code&"
        f"client_id={CLIENT_ID}&"
        f"redirect_uri={REDIRECT_URI}&"
        f"scope={requested_scope}&"
        f"code_challenge={code_challenge}&"
        f"code_challenge_method=S256&"
        f"state={state}"  # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º state –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è CSRF –∑–∞—â–∏—Ç—ã
    )

    return redirect(auth_url)


@app.route("/callback")
def callback():
    """
    Callback endpoint - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.

    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç state –ø–∞—Ä–∞–º–µ—Ç—Ä (CSRF –∑–∞—â–∏—Ç–∞), –æ–±–º–µ–Ω–∏–≤–∞–µ—Ç authorization code
    –Ω–∞ access token –∏ refresh token, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ–∫–µ–Ω—ã –≤ —Å–µ—Å—Å–∏–∏.

    Returns:
        redirect: –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ dashboard –∏–ª–∏ –æ—à–∏–±–∫—É
    """
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ callback URL
    code = request.args.get("code")
    error = request.args.get("error")
    received_state = request.args.get("state")  # –ü–æ–ª—É—á–∞–µ–º state –∏–∑ callback

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if error:
        return f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {error}", 400

    if not code:
        return "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", 400

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ PKCE –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    session_id = session.get("pkce_session_id")
    if not session_id or session_id not in pkce_store:
        return "‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", 400

    pkce_data = pkce_store[session_id]
    code_verifier = pkce_data["code_verifier"]
    saved_state = pkce_data.get("state")  # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π state

    # ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π state —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º
    if received_state != saved_state:
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É CSRF
        del pkce_store[session_id]
        session.pop("pkce_session_id", None)
        return "‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ CSRF –∞—Ç–∞–∫–∞: –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ state –ø–∞—Ä–∞–º–µ—Ç—Ä–∞", 400

    # –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ PKCE –¥–∞–Ω–Ω—ã–µ (–æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ)
    del pkce_store[session_id]
    session.pop("pkce_session_id", None)

    try:
        # –û–±–º–µ–Ω–∏–≤–∞–µ–º authorization code –Ω–∞ —Ç–æ–∫–µ–Ω—ã
        token_response = requests.post(
            f"{AUTH_SERVER}/token",
            data={
                "grant_type": "authorization_code",
                "code": code,
                "client_id": CLIENT_ID,
                "client_secret": CLIENT_SECRET,
                "redirect_uri": REDIRECT_URI,
                "code_verifier": code_verifier  # PKCE verification
            },
            timeout=10
        )

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ —Ç–æ–∫–µ–Ω–æ–≤
        if token_response.status_code != 200:
            error_data = token_response.json()
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤: {error_data.get('error', 'Unknown error')}", 400

        # –ü–∞—Ä—Å–∏–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç —Å —Ç–æ–∫–µ–Ω–∞–º–∏
        token_data = token_response.json()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏–∏
        session["access_token"] = token_data["access_token"]
        session["refresh_token"] = token_data.get("refresh_token", "")
        session["granted_scope"] = token_data.get("scope", "").split()

        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º JWT –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        is_valid, jwt_payload = validate_jwt_token(token_data["access_token"])
        if is_valid:
            session["user_id"] = jwt_payload.get("sub", "unknown")
            session["token_expiry"] = jwt_payload.get("exp", 0)
        else:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –µ—Å–ª–∏ JWT –Ω–µ–≤–∞–ª–∏–¥–µ–Ω
            session["user_id"] = "unknown"
            session["token_expiry"] = 0

        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∑–∞—â–∏—â–µ–Ω–Ω—ã–π –¥–∞—à–±–æ—Ä–¥
        return redirect(url_for("dashboard"))

    except requests.exceptions.RequestException as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫
        return f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}", 500
    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
        return f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", 500


@app.route("/dashboard")
def dashboard():
    """
    –î–∞—à–±–æ—Ä–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —Ç–æ–∫–µ–Ω —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω –≤ before_request
    """
    from flask import g

    # –î–∞–Ω–Ω—ã–µ —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã, –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
    jwt_payload = getattr(g, 'jwt_payload', {})
    access_token = getattr(g, 'access_token', '')

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞
    token_expiry = None
    if jwt_payload and "exp" in jwt_payload:
        expiry_time = datetime.datetime.fromtimestamp(jwt_payload["exp"])
        time_left = expiry_time - datetime.datetime.now()
        token_expiry = max(0, int(time_left.total_seconds() // 60))

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º JWT payload –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    formatted_jwt_payload = json.dumps(jwt_payload, indent=2, ensure_ascii=False) if jwt_payload else "{}"

    return render_template_string(
        DASHBOARD_TEMPLATE,
        user_id=session.get("user_id", "unknown"),
        granted_scope=session.get("granted_scope", []),
        access_token=access_token,
        refresh_token=session.get("refresh_token", ""),
        token_expiry=token_expiry,
        jwt_payload=formatted_jwt_payload
    )


@app.route("/refresh")
def refresh_token_page():
    """
    Endpoint –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è access token.

    Returns:
        redirect: –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ dashboard –∏–ª–∏ home
    """
    if refresh_access_token():
        return redirect(url_for("dashboard"))
    else:
        session.clear()
        return redirect(url_for("home"))


@app.route("/logout", methods=["POST"])
def logout():
    """
    –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã —Å –æ—Ç–∑—ã–≤–æ–º —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.

    –û—Ç–∑—ã–≤–∞–µ—Ç –∫–∞–∫ access token, —Ç–∞–∫ –∏ refresh token, –∑–∞—Ç–µ–º –æ—á–∏—â–∞–µ—Ç —Å–µ—Å—Å–∏—é.

    Returns:
        redirect: –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    """
    access_token = session.get("access_token")
    refresh_token = session.get("refresh_token")

    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–æ–∑–≤–∞—Ç—å access token –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if access_token:
        try:
            requests.post(
                f"{AUTH_SERVER}/revoke",
                data={
                    "token": access_token,
                    "token_type_hint": "access_token",
                    "client_id": CLIENT_ID,
                    "client_secret": CLIENT_SECRET
                },
                timeout=5
            )
        except requests.exceptions.RequestException:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–∑—ã–≤–∞ (–ª—É—á—à–µ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è, —á–µ–º –Ω–µ –ø—ã—Ç–∞—Ç—å—Å—è)
            pass

    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–æ–∑–≤–∞—Ç—å refresh token –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if refresh_token:
        try:
            requests.post(
                f"{AUTH_SERVER}/revoke",
                data={
                    "token": refresh_token,
                    "token_type_hint": "refresh_token",
                    "client_id": CLIENT_ID,
                    "client_secret": CLIENT_SECRET
                },
                timeout=5
            )
        except requests.exceptions.RequestException:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–∑—ã–≤–∞
            pass

    # –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –∫–ª–∏–µ–Ω—Ç–∞
    session.clear()
    return redirect(url_for("home"))


# =============================================================================
# –£–¢–ò–õ–ò–¢–´ –ò –û–ß–ò–°–¢–ö–ê
# =============================================================================

@app.before_request
def cleanup_pkce_store():
    """
    –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö PKCE –¥–∞–Ω–Ω—ã—Ö —Å TTL 5 –º–∏–Ω—É—Ç.

    –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –∑–∞–ø—Ä–æ—Å–æ–º –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —á–∏—Å—Ç–æ—Ç—ã —Ö—Ä–∞–Ω–∏–ª–∏—â–∞.
    """
    current_time = time.time()

    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∫–ª—é—á–∏ —Å –∏—Å—Ç–µ–∫—à–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –∂–∏–∑–Ω–∏
    keys_to_delete = [k for k, v in pkce_store.items()
                      if current_time - v["created_at"] > 300]  # 5 –º–∏–Ω—É—Ç

    # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ
    for key in keys_to_delete:
        del pkce_store[key]


@app.before_request
def check_token_validity():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –ø–µ—Ä–µ–¥ –∑–∞—â–∏—â–µ–Ω–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏.
    """
    protected_routes = ["/dashboard", "/refresh"]

    if request.path in protected_routes:
        access_token = session.get("access_token")

        # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞ - —Å—Ä–∞–∑—É –Ω–∞ –≥–ª–∞–≤–Ω—É—é
        if not access_token:
            session.clear()
            return redirect(url_for("home"))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ —Å –ø–æ–º–æ—â—å—é –°–£–©–ï–°–¢–í–£–Æ–©–ï–ô —Ñ—É–Ω–∫—Ü–∏–∏
        is_valid, jwt_payload = validate_jwt_token(access_token)

        # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å
        if not is_valid:
            if not refresh_access_token():
                session.clear()
                return redirect(url_for("home"))
            else:
                # –ü–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π payload
                access_token = session["access_token"]
                is_valid, jwt_payload = validate_jwt_token(access_token)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ route
        from flask import g
        g.jwt_payload = jwt_payload
        g.access_token = access_token


# =============================================================================
# –ó–ê–ü–£–°–ö –ö–õ–ò–ï–ù–¢–ê
# =============================================================================

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ OAuth 2.0 Web Client —Å JWT –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π...")
    print("üìç –ö–ª–∏–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ: http://127.0.0.1:5003")
    print("üîê –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:")
    print("   - OAuth 2.0 Authorization Code Flow —Å PKCE")
    print("   - JWT Access Tokens + Refresh Tokens")
    print("   - State –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è CSRF –∑–∞—â–∏—Ç—ã")
    print("   - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤")
    print("")
    print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ endpoints:")
    print("   GET  /              - –í—ã–±–æ—Ä scope –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
    print("   POST /request_auth  - –ò–Ω–∏—Ü–∏–∞—Ü–∏—è OAuth flow")
    print("   GET  /callback      - Callback –æ—Ç auth server")
    print("   GET  /dashboard     - –ó–∞—â–∏—â–µ–Ω–Ω—ã–π –¥–∞—à–±–æ—Ä–¥")
    print("   GET  /refresh       - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞")
    print("   POST /logout        - –í—ã—Ö–æ–¥ –∏ –æ—Ç–∑—ã–≤ —Ç–æ–∫–µ–Ω–æ–≤")
    print("")
    print("‚ö° Web Client –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

    # –ó–∞–ø—É—Å–∫ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app.run(port=5003, debug=True)