from flask import Flask, request, jsonify, redirect, render_template_string
import secrets
import time
import hashlib
import base64
import jwt
import datetime
from typing import Dict, List, Optional, Tuple

app = Flask(__name__)
app.secret_key = "super-secret-jwt-key-2024"  # –î–ª—è JWT –ø–æ–¥–ø–∏—Å–∏

# =============================================================================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ò –ù–ê–°–¢–†–û–ô–ö–ò
# =============================================================================

# JWT –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
JWT_CONFIG = {
    "algorithm": "HS256",
    "access_token_expiry": datetime.timedelta(minutes=15),  # 15 –º–∏–Ω—É—Ç
    "refresh_token_expiry": datetime.timedelta(days=7),  # 7 –¥–Ω–µ–π
    "issuer": "oauth2-auth-server",
    "audience": "resource-server"
}

# –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ (OAuth 2.0 clients)
clients = {
    "web_app": {
        "secret": "web_secret_123",
        "scopes": ["read_data", "write_data", "admin_panel"],
        "name": "–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
        "type": "confidential",
        "redirect_uris": ["http://127.0.0.1:5003/callback"]
    },
    "mobile_app": {
        "secret": "mobile_secret_456",
        "scopes": ["read_data"],
        "name": "–ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
        "type": "public",
        "redirect_uris": ["http://127.0.0.1:5004/callback"]
    }
}

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–∏—Å—Ç–µ–º—ã
users = {
    "alice": {
        "password": "password123",
        "scopes": ["read_data", "write_data", "admin_panel"],
        "name": "–ê–ª–∏—Å–∞ (–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)"
    },
    "bob": {
        "password": "password456",
        "scopes": ["read_data"],
        "name": "–ë–æ–± (–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)"
    }
}

# –•—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö
authorization_codes = {}  # –ö–æ–¥—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ {code: data}
refresh_tokens = {}  # Refresh tokens {token: data}
revoked_tokens = set()  # –û—Ç–æ–∑–≤–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã (blacklist)
auth_requests = {}  # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ {token: data}


# =============================================================================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# =============================================================================

def generate_token() -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è refresh tokens –∏ authorization codes"""
    return secrets.token_urlsafe(32)


def validate_pkce(code_verifier: str, stored_challenge: str, challenge_method: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç PKCE code_verifier –ø—Ä–æ—Ç–∏–≤ stored_challenge

    Args:
        code_verifier: –°–µ–∫—Ä–µ—Ç–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
        stored_challenge: Challenge –∏–∑ authorization code
        challenge_method: –ú–µ—Ç–æ–¥ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è (S256 –∏–ª–∏ plain)

    Returns:
        bool: True –µ—Å–ª–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
    """
    if not stored_challenge or not code_verifier:
        return False

    if challenge_method == "S256":
        digest = hashlib.sha256(code_verifier.encode()).digest()
        calculated_challenge = base64.urlsafe_b64encode(digest).decode().replace('=', '')
        return calculated_challenge == stored_challenge
    elif challenge_method == "plain":
        return code_verifier == stored_challenge
    else:
        return False


def create_access_token(user_id: str, client_id: str, scopes: List[str]) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç JWT access token

    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        client_id: ID –∫–ª–∏–µ–Ω—Ç–∞
        scopes: –°–ø–∏—Å–æ–∫ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞

    Returns:
        str: JWT —Ç–æ–∫–µ–Ω
    """
    now = datetime.datetime.utcnow()

    payload = {
        "sub": user_id,  # Subject (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
        "client_id": client_id,  # –ö–ª–∏–µ–Ω—Ç—Å–∫–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        "scopes": scopes,  # –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        "iat": now,  # Issued at
        "exp": now + JWT_CONFIG["access_token_expiry"],  # Expiration
        "iss": JWT_CONFIG["issuer"],  # Issuer
        "aud": JWT_CONFIG["audience"],  # Audience
        "jti": secrets.token_urlsafe(16),  # Unique token ID
        "type": "access"  # Token type
    }

    return jwt.encode(payload, app.secret_key, algorithm=JWT_CONFIG["algorithm"])


def create_refresh_token(user_id: str, client_id: str, scopes: List[str]) -> Tuple[str, dict]:
    """
    –°–æ–∑–¥–∞–µ—Ç refresh token (–Ω–µ-JWT, —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –±–∞–∑–µ)

    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        client_id: ID –∫–ª–∏–µ–Ω—Ç–∞
        scopes: –°–ø–∏—Å–æ–∫ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞

    Returns:
        Tuple[str, dict]: (refresh_token, token_data)
    """
    token = generate_token()
    now = time.time()

    token_data = {
        "user_id": user_id,
        "client_id": client_id,
        "scopes": scopes,
        "created_at": now,
        "expires_at": now + JWT_CONFIG["refresh_token_expiry"].total_seconds(),
        "last_used": None
    }

    refresh_tokens[token] = token_data
    return token, token_data


def verify_jwt_token(token: str) -> Tuple[bool, Optional[dict]]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç JWT access token

    Args:
        token: JWT —Ç–æ–∫–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

    Returns:
        Tuple[bool, Optional[dict]]: (is_valid, payload_or_error)
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–æ–∑–≤–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
        if token in revoked_tokens:
            return False, {"error": "Token revoked"}

        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º JWT
        payload = jwt.decode(
            token,
            app.secret_key,
            algorithms=[JWT_CONFIG["algorithm"]],
            issuer=JWT_CONFIG["issuer"],
            audience=JWT_CONFIG["audience"]
        )

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ç–æ–∫–µ–Ω–∞
        if payload.get("type") != "access":
            return False, {"error": "Invalid token type"}

        return True, payload

    except jwt.ExpiredSignatureError:
        return False, {"error": "Token expired"}
    except jwt.InvalidTokenError as e:
        return False, {"error": f"Invalid token: {str(e)}"}


def verify_refresh_token(token: str) -> Tuple[bool, Optional[dict]]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç refresh token

    Args:
        token: Refresh token –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

    Returns:
        Tuple[bool, Optional[dict]]: (is_valid, token_data_or_error)
    """
    if token not in refresh_tokens:
        return False, {"error": "Invalid refresh token"}

    token_data = refresh_tokens[token]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
    if time.time() > token_data["expires_at"]:
        del refresh_tokens[token]
        return False, {"error": "Refresh token expired"}

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    token_data["last_used"] = time.time()

    return True, token_data


# =============================================================================
# HTML –®–ê–ë–õ–û–ù–´
# =============================================================================

LOGIN_TEMPLATE = """
<!DOCTYPE html>
<html>
<head>
    <title>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</title>
    <meta charset="utf-8">
    <style>
        body { font-family: Arial, sans-serif; max-width: 500px; margin: 50px auto; }
        .form-group { margin: 15px 0; }
        label { display: block; margin-bottom: 5px; }
        input[type="text"], input[type="password"] { 
            width: 100%; padding: 8px; border: 1px solid #ccc; border-radius: 4px; 
        }
        button { 
            background: #007bff; color: white; padding: 10px 20px; 
            border: none; border-radius: 4px; cursor: pointer; 
        }
        .info { background: #f8f9fa; padding: 15px; border-radius: 4px; margin: 20px 0; }
        .error { 
            background: #ffe6e6; 
            color: #dc3545; 
            padding: 15px; 
            border-radius: 4px; 
            margin: 20px 0;
            border-left: 4px solid #dc3545;
        }
    </style>
</head>
<body>
    <h2>üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</h2>

    {% if error_message %}
    <div class="error">
        <strong>‚ùå –û—à–∏–±–∫–∞:</strong> {{ error_message }}
    </div>
    {% endif %}

    <div class="info">
        <strong>–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:</strong> {{ client_name }}<br>
        <strong>–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–µ –ø—Ä–∞–≤–∞:</strong> {{ requested_scope }}
    </div>

    <form method="POST" action="/login_approve">
        <input type="hidden" name="auth_token" value="{{ auth_token }}">
        <input type="hidden" name="client_id" value="{{ client_id }}">
        <input type="hidden" name="redirect_uri" value="{{ redirect_uri }}">
        <input type="hidden" name="requested_scope" value="{{ requested_scope_str }}">
        <input type="hidden" name="code_challenge" value="{{ code_challenge }}">
        <input type="hidden" name="code_challenge_method" value="{{ code_challenge_method }}">
        {% if state %}
        <input type="hidden" name="state" value="{{ state }}">
        {% endif %}

        <div class="form-group">
            <label>–õ–æ–≥–∏–Ω:</label>
            <input type="text" name="username" required>
        </div>

        <div class="form-group">
            <label>–ü–∞—Ä–æ–ª—å:</label>
            <input type="password" name="password" required>
        </div>

        <button type="submit">–í–æ–π—Ç–∏</button>
    </form>

    <div style="margin-top: 30px; border-top: 1px solid #eee; padding-top: 20px;">
        <strong>–¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</strong><br>
        üë©‚Äçüíº <strong>alice</strong> / password123 (–ê–¥–º–∏–Ω: –≤—Å–µ –ø—Ä–∞–≤–∞)<br>
        üë®‚Äçüíº <strong>bob</strong> / password456 (–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: —Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ)
    </div>
</body>
</html>
"""


# =============================================================================
# OAUTH 2.0 ENDPOINTS
# =============================================================================

@app.route("/")
def home():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    stats_html = f"""
    <!DOCTYPE html>
    <html>
    <head>
        <title>OAuth2 –°–µ—Ä–≤–µ—Ä –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</title>
        <meta charset="utf-8">
        <style>
            body {{ font-family: Arial, sans-serif; max-width: 800px; margin: 50px auto; }}
            .card {{ background: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0; }}
        </style>
    </head>
    <body>
        <h1>üöÄ OAuth2 –°–µ—Ä–≤–µ—Ä –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (JWT)</h1>

        <div class="card">
            <h2>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã</h2>
            <p>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: <strong>{len(clients)}</strong></p>
            <p>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <strong>{len(users)}</strong></p>
            <p>–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–¥–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: <strong>{len(authorization_codes)}</strong></p>
            <p>–ê–∫—Ç–∏–≤–Ω—ã—Ö refresh —Ç–æ–∫–µ–Ω–æ–≤: <strong>{len(refresh_tokens)}</strong></p>
            <p>–û—Ç–æ–∑–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤: <strong>{len(revoked_tokens)}</strong></p>
            <p>–ê–∫—Ç–∏–≤–Ω—ã—Ö auth –∑–∞–ø—Ä–æ—Å–æ–≤: <strong>{len(auth_requests)}</strong></p>
        </div>

        <div class="card">
            <h2>üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ endpoints</h2>
            <ul>
                <li><code>GET /authorize</code> - –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</li>
                <li><code>POST /token</code> - –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ (JWT)</li>
                <li><code>POST /verify_token</code> - –ü—Ä–æ–≤–µ—Ä–∫–∞ JWT —Ç–æ–∫–µ–Ω–∞</li>
                <li><code>POST /revoke</code> - –û—Ç–∑—ã–≤ —Ç–æ–∫–µ–Ω–∞</li>
                <li><code>POST /refresh</code> - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤</li>
            </ul>
        </div>

        <div class="card">
            <h2>üë• –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</h2>
            <ul>
                <li><strong>alice</strong> / password123 (–ê–¥–º–∏–Ω - –≤—Å–µ –ø—Ä–∞–≤–∞)</li>
                <li><strong>bob</strong> / password456 (–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ)</li>
            </ul>
        </div>
    </body>
    </html>
    """
    return stats_html


@app.route("/authorize", methods=["GET"])
def authorize():
    """
    OAuth 2.0 Authorization Endpoint
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTML —Ñ–æ—Ä–º—É –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    client_id = request.args.get("client_id")
    redirect_uri = request.args.get("redirect_uri")
    requested_scope = request.args.get("scope", "").split()
    code_challenge = request.args.get("code_challenge")
    code_challenge_method = request.args.get("code_challenge_method", "plain")
    state = request.args.get("state")

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if not client_id or not redirect_uri:
        return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: client_id –∏ redirect_uri –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã", 400

    if client_id not in clients:
        return "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π client_id", 400

    client = clients[client_id]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ PKCE –¥–ª—è public clients
    if client["type"] == "public" and not code_challenge:
        return "‚ùå –ü—É–±–ª–∏—á–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å PKCE", 400

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö scopes
    invalid_scopes = [s for s in requested_scope if s not in client["scopes"]]
    if invalid_scopes:
        return f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ scope: {', '.join(invalid_scopes)}", 400

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    auth_token = generate_token()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    auth_requests[auth_token] = {
        "client_id": client_id,
        "redirect_uri": redirect_uri,
        "requested_scope": requested_scope,
        "code_challenge": code_challenge,
        "code_challenge_method": code_challenge_method,
        "state": state,
        "timestamp": time.time()
    }

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    return render_template_string(
        LOGIN_TEMPLATE,
        auth_token=auth_token,
        client_id=client_id,
        client_name=client["name"],
        redirect_uri=redirect_uri,
        requested_scope=requested_scope,
        requested_scope_str=" ".join(requested_scope),
        code_challenge=code_challenge or "",
        code_challenge_method=code_challenge_method,
        state=state or ""
    )


@app.route("/login_approve", methods=["POST"])
def login_approve():
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    –°–æ–∑–¥–∞–µ—Ç authorization code –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ redirect_uri
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º auth token –∏–∑ —Ñ–æ—Ä–º—ã
        auth_token = request.form["auth_token"]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å auth token
        if auth_token not in auth_requests:
            return "‚ùå –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", 400

        auth_data = auth_requests[auth_token]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∑–∞–ø—Ä–æ—Å–∞ (5 –º–∏–Ω—É—Ç)
        if time.time() - auth_data["timestamp"] > 300:
            del auth_requests[auth_token]
            return "‚ùå –ó–∞–ø—Ä–æ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —É—Å—Ç–∞—Ä–µ–ª", 400

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        client_id = auth_data["client_id"]
        redirect_uri = auth_data["redirect_uri"]
        requested_scope = auth_data["requested_scope"]
        code_challenge = auth_data["code_challenge"]
        code_challenge_method = auth_data["code_challenge_method"]
        state = auth_data["state"]

        # –ü–æ–ª—É—á–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
        username = request.form["username"]
        password = request.form["password"]

        # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if username not in users or users[username]["password"] != password:
            return render_template_string(
                LOGIN_TEMPLATE,
                auth_token=auth_token,
                client_id=client_id,
                client_name=clients[client_id]["name"],
                redirect_uri=redirect_uri,
                requested_scope=requested_scope,
                requested_scope_str=" ".join(requested_scope),
                code_challenge=code_challenge or "",
                code_challenge_method=code_challenge_method,
                state=state or "",
                error_message="–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å"
            ), 401

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        user_scopes = users[username]["scopes"]
        allowed_scope = [s for s in requested_scope if s in user_scopes]
        if not allowed_scope:
            return render_template_string(
                LOGIN_TEMPLATE,
                auth_token=auth_token,
                client_id=client_id,
                client_name=clients[client_id]["name"],
                redirect_uri=redirect_uri,
                requested_scope=requested_scope,
                requested_scope_str=" ".join(requested_scope),
                code_challenge=code_challenge or "",
                code_challenge_method=code_challenge_method,
                state=state or "",
                error_message="–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã—Ö –ø—Ä–∞–≤"
            ), 403

        # –°–æ–∑–¥–∞–µ–º authorization code
        code = generate_token()
        authorization_codes[code] = {
            "client_id": client_id,
            "user_id": username,
            "scope": allowed_scope,
            "expires_at": time.time() + 300,  # 5 –º–∏–Ω—É—Ç
            "code_challenge": code_challenge,
            "code_challenge_method": code_challenge_method,
            "redirect_uri": redirect_uri,
            "state": state
        }

        # –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π auth token
        del auth_requests[auth_token]

        # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è redirect
        redirect_url = f"{redirect_uri}?code={code}"
        if state:
            redirect_url += f"&state={state}"

        return redirect(redirect_url)

    except KeyError as e:
        return f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä: {e}", 400
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}", 500


@app.route("/token", methods=["POST"])
def issue_token():
    """
    OAuth 2.0 Token Endpoint
    –í—ã–¥–∞–µ—Ç JWT access tokens –∏ refresh tokens
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç: authorization_code, password, refresh_token grants
    """
    data = request.form
    grant_type = data.get("grant_type")

    # Authorization Code Grant
    if grant_type == "authorization_code":
        return handle_authorization_code_grant(data)

    # Password Grant
    elif grant_type == "password":
        return handle_password_grant(data)

    # Refresh Token Grant
    elif grant_type == "refresh_token":
        return handle_refresh_token_grant(data)

    else:
        return jsonify({"error": "unsupported_grant_type"}), 400


def handle_authorization_code_grant(data: Dict) -> jsonify:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ Authorization Code Grant flow"""
    code = data.get("code")
    client_id = data.get("client_id")
    redirect_uri = data.get("redirect_uri")
    code_verifier = data.get("code_verifier")
    client_secret = data.get("client_secret")

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if not code or not client_id or not redirect_uri:
        return jsonify({"error": "invalid_request", "error_description": "Missing parameters"}), 400

    if client_id not in clients:
        return jsonify({"error": "invalid_client"}), 401

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ authorization code
    if code not in authorization_codes:
        return jsonify({"error": "invalid_grant"}), 401

    code_data = authorization_codes[code]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
    if time.time() > code_data["expires_at"]:
        del authorization_codes[code]
        return jsonify({"error": "invalid_grant", "error_description": "Code expired"}), 401

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ –∏ redirect_uri
    if code_data["client_id"] != client_id or code_data["redirect_uri"] != redirect_uri:
        return jsonify({"error": "invalid_grant"}), 401

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ client_secret –¥–ª—è confidential clients
    client = clients[client_id]
    if client["type"] == "confidential":
        if not client_secret or client_secret != client["secret"]:
            return jsonify({"error": "invalid_client"}), 401

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ PKCE
    if code_data.get("code_challenge"):
        if not code_verifier:
            return jsonify({"error": "invalid_grant", "error_description": "code_verifier required"}), 400
        if not validate_pkce(code_verifier, code_data["code_challenge"], code_data["code_challenge_method"]):
            return jsonify({"error": "invalid_grant", "error_description": "PKCE verification failed"}), 400

    # –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥
    del authorization_codes[code]

    # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω—ã
    access_token = create_access_token(code_data["user_id"], client_id, code_data["scope"])
    refresh_token, refresh_data = create_refresh_token(code_data["user_id"], client_id, code_data["scope"])

    return jsonify({
        "access_token": access_token,
        "token_type": "Bearer",
        "expires_in": int(JWT_CONFIG["access_token_expiry"].total_seconds()),
        "refresh_token": refresh_token,
        "scope": " ".join(code_data["scope"])
    })


def handle_password_grant(data: Dict) -> jsonify:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ Resource Owner Password Credentials Grant flow"""
    client_id = data.get("client_id")
    client_secret = data.get("client_secret")
    username = data.get("username")
    password = data.get("password")
    requested_scope = data.get("scope", "").split()

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if not client_id or not username or not password:
        return jsonify({"error": "invalid_request", "error_description": "Missing parameters"}), 400

    if client_id not in clients:
        return jsonify({"error": "invalid_client"}), 401

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ client_secret –¥–ª—è confidential clients
    client = clients[client_id]
    if client["type"] == "confidential":
        if not client_secret or client_secret != client["secret"]:
            return jsonify({"error": "invalid_client"}), 401

    # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if username not in users or users[username]["password"] != password:
        return jsonify({"error": "invalid_grant"}), 401

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ scopes
    user_scopes = users[username]["scopes"]
    allowed_scope = [s for s in requested_scope if s in user_scopes] if requested_scope else user_scopes

    # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω—ã
    access_token = create_access_token(username, client_id, allowed_scope)
    refresh_token, refresh_data = create_refresh_token(username, client_id, allowed_scope)

    return jsonify({
        "access_token": access_token,
        "token_type": "Bearer",
        "expires_in": int(JWT_CONFIG["access_token_expiry"].total_seconds()),
        "refresh_token": refresh_token,
        "scope": " ".join(allowed_scope)
    })


def handle_refresh_token_grant(data: Dict) -> jsonify:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ Refresh Token Grant flow"""
    refresh_token = data.get("refresh_token")
    client_id = data.get("client_id")
    client_secret = data.get("client_secret")
    requested_scope = data.get("scope", "").split()

    if not refresh_token or not client_id:
        return jsonify({"error": "invalid_request", "error_description": "Missing parameters"}), 400

    if client_id not in clients:
        return jsonify({"error": "invalid_client"}), 401

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ client_secret –¥–ª—è confidential clients
    client = clients[client_id]
    if client["type"] == "confidential":
        if not client_secret or client_secret != client["secret"]:
            return jsonify({"error": "invalid_client"}), 401

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ refresh token
    is_valid, token_data = verify_refresh_token(refresh_token)
    if not is_valid:
        return jsonify({"error": "invalid_grant"}), 401

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞
    if token_data["client_id"] != client_id:
        return jsonify({"error": "invalid_grant"}), 401

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ scopes (–µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω—ã –Ω–æ–≤—ã–µ)
    if requested_scope:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–µ scope —è–≤–ª—è—é—Ç—Å—è –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö
        if not all(scope in token_data["scopes"] for scope in requested_scope):
            return jsonify({"error": "invalid_scope"}), 400
        final_scopes = requested_scope
    else:
        final_scopes = token_data["scopes"]

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã
    access_token = create_access_token(token_data["user_id"], client_id, final_scopes)

    return jsonify({
        "access_token": access_token,
        "token_type": "Bearer",
        "expires_in": int(JWT_CONFIG["access_token_expiry"].total_seconds()),
        "scope": " ".join(final_scopes)
    })


@app.route("/verify_token", methods=["POST"])
def verify_token():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å JWT access token
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    """
    token = request.form.get("token")
    if not token:
        return jsonify({"valid": False, "error": "Token required"}), 400

    is_valid, result = verify_jwt_token(token)

    if is_valid:
        return jsonify({
            "valid": True,
            "client_id": result["client_id"],
            "user_id": result["sub"],
            "scope": result["scopes"],
            "expires_at": result["exp"]
        })
    else:
        return jsonify({"valid": False, "error": result["error"]}), 401


@app.route("/revoke", methods=["POST"])
def revoke_token():
    """
    –û—Ç–∑—ã–≤–∞–µ—Ç —Ç–æ–∫–µ–Ω (–¥–æ–±–∞–≤–ª—è–µ—Ç –≤ blacklist)
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ—Ç–∑—ã–≤ –∫–∞–∫ access, —Ç–∞–∫ –∏ refresh —Ç–æ–∫–µ–Ω–æ–≤
    """
    token = request.form.get("token")
    token_type_hint = request.form.get("token_type_hint", "access_token")
    client_id = request.form.get("client_id")
    client_secret = request.form.get("client_secret")

    if not token or not client_id:
        return jsonify({"error": "invalid_request"}), 400

    if client_id not in clients:
        return jsonify({"error": "invalid_client"}), 401

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ client_secret –¥–ª—è confidential clients
    client = clients[client_id]
    if client["type"] == "confidential":
        if not client_secret or client_secret != client["secret"]:
            return jsonify({"error": "invalid_client"}), 401

    # –û—Ç–∑—ã–≤ —Ç–æ–∫–µ–Ω–∞
    if token_type_hint == "refresh_token" and token in refresh_tokens:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å refresh token
        if refresh_tokens[token]["client_id"] == client_id:
            del refresh_tokens[token]
            revoked_tokens.add(token)  # –î–æ–±–∞–≤–ª—è–µ–º –≤ blacklist
            return jsonify({"message": "Token revoked successfully"})

    # –î–ª—è access tokens –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤ blacklist
    revoked_tokens.add(token)

    # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ refresh token'–æ–º
    if token in refresh_tokens and refresh_tokens[token]["client_id"] == client_id:
        del refresh_tokens[token]

    return jsonify({"message": "Token revoked successfully"})


@app.route("/refresh", methods=["POST"])
def refresh_token():
    """
    –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π endpoint –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
    (–î—É–±–ª–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å grant_type=refresh_token –≤ /token)
    """
    return handle_refresh_token_grant(request.form)


# =============================================================================
# –£–¢–ò–õ–ò–¢–´ –ò –û–ß–ò–°–¢–ö–ê
# =============================================================================

@app.route("/cleanup", methods=["POST"])
def cleanup():
    """
    –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    –£–¥–∞–ª—è–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ authorization codes, refresh tokens –∏ auth requests
    """
    now = time.time()
    expired_codes = 0
    expired_refresh_tokens = 0
    expired_auth_requests = 0

    # –û—á–∏—Å—Ç–∫–∞ authorization codes
    for code in list(authorization_codes.keys()):
        if authorization_codes[code]["expires_at"] < now:
            del authorization_codes[code]
            expired_codes += 1

    # –û—á–∏—Å—Ç–∫–∞ refresh tokens
    for token in list(refresh_tokens.keys()):
        if refresh_tokens[token]["expires_at"] < now:
            del refresh_tokens[token]
            expired_refresh_tokens += 1

    # –û—á–∏—Å—Ç–∫–∞ auth requests
    for token in list(auth_requests.keys()):
        if now - auth_requests[token]["timestamp"] > 300:  # 5 –º–∏–Ω—É—Ç
            del auth_requests[token]
            expired_auth_requests += 1

    return jsonify({
        "message": "Cleanup completed",
        "expired_authorization_codes": expired_codes,
        "expired_refresh_tokens": expired_refresh_tokens,
        "expired_auth_requests": expired_auth_requests
    })


@app.before_request
def handle_options():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ CORS preflight –∑–∞–ø—Ä–æ—Å–æ–≤"""
    if request.method == "OPTIONS":
        response = jsonify()
        response.headers.add("Access-Control-Allow-Origin", "*")
        response.headers.add("Access-Control-Allow-Headers", "Content-Type")
        response.headers.add("Access-Control-Allow-Methods", "GET, POST, OPTIONS")
        return response


@app.after_request
def after_request(response):
    """–î–æ–±–∞–≤–ª—è–µ—Ç CORS headers –∫–æ –≤—Å–µ–º –æ—Ç–≤–µ—Ç–∞–º"""
    response.headers.add("Access-Control-Allow-Origin", "*")
    response.headers.add("Access-Control-Allow-Headers", "Content-Type")
    response.headers.add("Access-Control-Allow-Methods", "GET, POST, OPTIONS")
    return response

# =============================================================================
# –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê
# =============================================================================

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ OAuth 2.0 —Å–µ—Ä–≤–µ—Ä–∞ —Å JWT –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π...")
    print("üìç –°–µ—Ä–≤–µ—Ä –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: http://127.0.0.1:5000")
    print("üîê –ê–ª–≥–æ—Ä–∏—Ç–º JWT: HS256")
    print("‚è∞ –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ access token: 15 –º–∏–Ω—É—Ç")
    print("üîÑ –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ refresh token: 7 –¥–Ω–µ–π")
    print("üîë –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è stateless –ø–æ–¥—Ö–æ–¥ –±–µ–∑ —Å–µ—Å—Å–∏–π")

    app.run(port=5000, debug=True)