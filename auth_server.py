from flask import Flask, request, jsonify, redirect, render_template_string
import secrets
import time
import hashlib
import base64

app = Flask(__name__)

# –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–æ–≤
clients = {
    "web_app": {
        "secret": "web_secret_123",
        "scopes": ["read_data", "write_data", "admin_panel"],
        "name": "–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
        "type": "public"  # –ú–æ–∂–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å —Å–µ–∫—Ä–µ—Ç
    },
    "mobile_app": {
        "secret": "mobile_secret_456",
        "scopes": ["read_data"],
        "name": "–ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
        "type": "public"  # –ù–µ –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–µ–∫—Ä–µ—Ç –≤ –∑–∞–ø—Ä–æ—Å–∞—Ö
    }
}

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏
users = {
    "alice": {
        "password": "password123",
        "scopes": ["read_data", "write_data", "admin_panel"],
        "name": "–ê–ª–∏—Å–∞ (–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)"
    },
    "bob": {
        "password": "password456",
        "scopes": ["read_data"],
        "name": "–ë–æ–± (–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)"
    }
}

# –•—Ä–∞–Ω–∏–ª–∏—â–∞
tokens = {}
authorization_codes = {}
revoked_tokens = set()


def generate_token():
    return secrets.token_urlsafe(32)


def validate_pkce(code_verifier, stored_challenge, challenge_method):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç PKCE code_verifier –ø—Ä–æ—Ç–∏–≤ stored_challenge"""
    if not stored_challenge or not code_verifier:
        return False

    if challenge_method == "S256":
        # –í—ã—á–∏—Å–ª—è–µ–º —Ö–µ—à –æ—Ç code_verifier
        digest = hashlib.sha256(code_verifier.encode()).digest()
        calculated_challenge = base64.urlsafe_b64encode(digest).decode().replace('=', '')
        return calculated_challenge == stored_challenge
    elif challenge_method == "plain":
        # –ü—Ä–æ—Å—Ç–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ (–º–µ–Ω–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ)
        return code_verifier == stored_challenge
    else:
        return False


# HTML —à–∞–±–ª–æ–Ω—ã (–æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
LOGIN_TEMPLATE = """
<!DOCTYPE html>
<html>
<head>
    <title>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</title>
    <meta charset="utf-8">
    <style>
        body { font-family: Arial, sans-serif; max-width: 500px; margin: 50px auto; }
        .form-group { margin: 15px 0; }
        label { display: block; margin-bottom: 5px; }
        input[type="text"], input[type="password"] { 
            width: 100%; padding: 8px; border: 1px solid #ccc; border-radius: 4px; 
        }
        button { 
            background: #007bff; color: white; padding: 10px 20px; 
            border: none; border-radius: 4px; cursor: pointer; 
        }
        .info { background: #f8f9fa; padding: 15px; border-radius: 4px; margin: 20px 0; }
    </style>
</head>
<body>
    <h2>üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</h2>

    <div class="info">
        <strong>–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:</strong> {{ client_name }}<br>
        <strong>–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–µ –ø—Ä–∞–≤–∞:</strong> {{ requested_scope }}
    </div>

    <form method="POST" action="/login_approve">
        <input type="hidden" name="client_id" value="{{ client_id }}">
        <input type="hidden" name="redirect_uri" value="{{ redirect_uri }}">
        <input type="hidden" name="requested_scope" value="{{ requested_scope_str }}">
        <input type="hidden" name="code_challenge" value="{{ code_challenge }}">
        <input type="hidden" name="code_challenge_method" value="{{ code_challenge_method }}">

        <div class="form-group">
            <label>–õ–æ–≥–∏–Ω:</label>
            <input type="text" name="username" required>
        </div>

        <div class="form-group">
            <label>–ü–∞—Ä–æ–ª—å:</label>
            <input type="password" name="password" required>
        </div>

        <button type="submit">–í–æ–π—Ç–∏</button>
    </form>

    <div style="margin-top: 30px; border-top: 1px solid #eee; padding-top: 20px;">
        <strong>–¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</strong><br>
        üë©‚Äçüíº <strong>alice</strong> / password123 (–ê–¥–º–∏–Ω: –≤—Å–µ –ø—Ä–∞–≤–∞)<br>
        üë®‚Äçüíº <strong>bob</strong> / password456 (–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: —Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ)
    </div>
</body>
</html>
"""

ADMIN_TEMPLATE = """
<!DOCTYPE html>
<html>
<head>
    <title>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</title>
    <meta charset="utf-8">
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        table { border-collapse: collapse; width: 100%; margin: 20px 0; }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
        th { background-color: #f2f2f2; }
        .stats { display: flex; gap: 20px; margin: 20px 0; }
        .stat-card { background: #f8f9fa; padding: 15px; border-radius: 5px; }
    </style>
</head>
<body>
    <h2>‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞–º–∏</h2>

    <div class="stats">
        <div class="stat-card">
            <h3>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
            <p>–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤: <strong>{{ active_count }}</strong></p>
            <p>–û—Ç–æ–∑–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤: <strong>{{ revoked_count }}</strong></p>
        </div>
    </div>

    <h3>üîë –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã</h3>
    {% if tokens_list %}
    <table>
        <tr>
            <th>–¢–æ–∫–µ–Ω (–ø–µ—Ä–≤—ã–µ 10 —Å–∏–º–≤–æ–ª–æ–≤)</th>
            <th>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</th>
            <th>–ö–ª–∏–µ–Ω—Ç</th>
            <th>–ü—Ä–∞–≤–∞</th>
            <th>–î–µ–π—Å—Ç–≤–∏—è</th>
        </tr>
        {% for token, data in tokens_list %}
        <tr>
            <td><code>{{ token[:10] }}...</code></td>
            <td>{{ data.user_id }}</td>
            <td>{{ data.client_id }}</td>
            <td>{{ data.scope }}</td>
            <td>
                <form method="post" action="/admin/revoke" style="display: inline;">
                    <input type="hidden" name="token" value="{{ token }}">
                    <button type="submit" style="background: #dc3545; color: white; border: none; padding: 5px 10px; border-radius: 3px; cursor: pointer;">
                        –û—Ç–æ–∑–≤–∞—Ç—å
                    </button>
                </form>
            </td>
        </tr>
        {% endfor %}
    </table>
    {% else %}
    <p>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤</p>
    {% endif %}

    <h3>üö´ –û—Ç–æ–∑–≤–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã</h3>
    <p>–í—Å–µ–≥–æ –æ—Ç–æ–∑–≤–∞–Ω–æ: {{ revoked_count }}</p>

    <div style="margin-top: 30px;">
        <a href="/">‚Üê –ù–∞ –≥–ª–∞–≤–Ω—É—é</a>
    </div>
</body>
</html>
"""


@app.route("/")
def home():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    stats_html = f"""
    <!DOCTYPE html>
    <html>
    <head>
        <title>OAuth2 –°–µ—Ä–≤–µ—Ä –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</title>
        <meta charset="utf-8">
        <style>
            body {{ font-family: Arial, sans-serif; max-width: 800px; margin: 50px auto; }}
            .card {{ background: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0; }}
        </style>
    </head>
    <body>
        <h1>üöÄ OAuth2 –°–µ—Ä–≤–µ—Ä –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</h1>

        <div class="card">
            <h2>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã</h2>
            <p>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: <strong>{len(clients)}</strong></p>
            <p>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <strong>{len(users)}</strong></p>
            <p>–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤: <strong>{len(tokens)}</strong></p>
            <p>–û—Ç–æ–∑–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤: <strong>{len(revoked_tokens)}</strong></p>
        </div>

        <div class="card">
            <h2>üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ endpoints</h2>
            <ul>
                <li><code>GET /authorize</code> - –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</li>
                <li><code>POST /token</code> - –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞</li>
                <li><code>POST /verify_token</code> - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞</li>
                <li><code>POST /revoke</code> - –û—Ç–∑—ã–≤ —Ç–æ–∫–µ–Ω–∞</li>
                <li><code>GET /admin/tokens</code> - –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</li>
            </ul>
        </div>

        <div class="card">
            <h2>üë• –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</h2>
            <ul>
                <li><strong>alice</strong> / password123 (–ê–¥–º–∏–Ω - –≤—Å–µ –ø—Ä–∞–≤–∞)</li>
                <li><strong>bob</strong> / password456 (–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ)</li>
            </ul>
        </div>
    </body>
    </html>
    """
    return stats_html


@app.route("/authorize", methods=["GET"])
def authorize():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ OAuth2 —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π PKCE"""
    client_id = request.args.get("client_id")
    redirect_uri = request.args.get("redirect_uri")
    requested_scope = request.args.get("scope", "").split()
    code_challenge = request.args.get("code_challenge")
    code_challenge_method = request.args.get("code_challenge_method", "plain")

    if client_id not in clients:
        return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π client_id", 400

    if not redirect_uri:
        return "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç redirect_uri", 400

    # –î–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ —Ç—Ä–µ–±–æ–≤–∞—Ç—å PKCE
    if clients[client_id]["type"] == "public" and not code_challenge:
        return "‚ùå –ü—É–±–ª–∏—á–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å PKCE (—Ç—Ä–µ–±—É–µ—Ç—Å—è code_challenge)", 400

    client_name = clients[client_id].get("name", client_id)

    return render_template_string(
        LOGIN_TEMPLATE,
        client_id=client_id,
        client_name=client_name,
        redirect_uri=redirect_uri,
        requested_scope=requested_scope,
        requested_scope_str=" ".join(requested_scope),
        code_challenge=code_challenge or "",
        code_challenge_method=code_challenge_method
    )


@app.route("/login_approve", methods=["POST"])
def login_approve():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º PKCE –¥–∞–Ω–Ω—ã—Ö"""
    try:
        client_id = request.form["client_id"]
        username = request.form["username"]
        password = request.form["password"]
        redirect_uri = request.form["redirect_uri"]
        requested_scope = request.form.get("requested_scope", "").split()
        code_challenge = request.form.get("code_challenge")
        code_challenge_method = request.form.get("code_challenge_method", "plain")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if username not in users or users[username]["password"] != password:
            return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å", 401

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º scope
        user_scopes = users[username]["scopes"]
        allowed_scope = [s for s in requested_scope if s in user_scopes]

        if not allowed_scope:
            return "‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã—Ö –ø—Ä–∞–≤", 403

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        code = secrets.token_urlsafe(16)
        authorization_codes[code] = {
            "client_id": client_id,
            "user_id": username,
            "scope": allowed_scope,
            "expires_at": time.time() + 300,  # 5 –º–∏–Ω—É—Ç
            "code_challenge": code_challenge,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º PKCE challenge
            "code_challenge_method": code_challenge_method
        }

        return redirect(f"{redirect_uri}?code={code}")

    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}", 500


@app.route("/token", methods=["POST"])
def issue_token():
    """–í—ã–¥–∞—á–∞ —Ç–æ–∫–µ–Ω–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π PKCE"""
    data = request.form
    grant_type = data.get("grant_type")

    # Password Grant (–¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –±–µ–∑ –±—Ä–∞—É–∑–µ—Ä–∞)
    if grant_type == "password":
        client_id = data.get("client_id")
        client_secret = data.get("client_secret")
        username = data.get("username")
        password = data.get("password")
        requested_scope = data.get("scope", "").split()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        if client_id not in clients:
            return jsonify({"error": "invalid_client"}), 401

        # –î–ª—è confidential –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∫—Ä–µ—Ç
        if clients[client_id]["type"] == "confidential":
            if clients[client_id]["secret"] != client_secret:
                return jsonify({"error": "invalid_client"}), 401

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if username not in users or users[username]["password"] != password:
            return jsonify({"error": "invalid_grant"}), 401

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º scope
        user_scopes = users[username]["scopes"]
        allowed_scope = [s for s in requested_scope if s in user_scopes]

        # –°–æ–∑–¥–∞—ë–º —Ç–æ–∫–µ–Ω
        token = generate_token()
        tokens[token] = {
            "client_id": client_id,
            "user_id": username,
            "scope": allowed_scope,
            "expires_at": time.time() + 3600  # 1 —á–∞—Å
        }

        return jsonify({
            "access_token": token,
            "token_type": "Bearer",
            "expires_in": 3600,
            "scope": " ".join(allowed_scope)
        })

    # Authorization Code Grant —Å PKCE
    elif grant_type == "authorization_code":
        code = data.get("code")
        client_id = data.get("client_id")
        client_secret = data.get("client_secret")  # –ú–æ–∂–µ—Ç –±—ã—Ç—å None –¥–ª—è public clients
        code_verifier = data.get("code_verifier")  # PKCE –ø–∞—Ä–∞–º–µ—Ç—Ä

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        if client_id not in clients:
            return jsonify({"error": "invalid_client"}), 401

        client_type = clients[client_id]["type"]

        # üîê –†–ê–ó–î–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –î–õ–Ø –†–ê–ó–ù–´–• –¢–ò–ü–û–í –ö–õ–ò–ï–ù–¢–û–í
        if client_type == "confidential":
            # –î–ª—è confidential clients –ø—Ä–æ–≤–µ—Ä—è–µ–º client_secret
            if not client_secret or clients[client_id]["secret"] != client_secret:
                return jsonify({"error": "invalid_client"}), 401
        elif client_type == "public":
            # –î–ª—è public clients –ù–ï –ø—Ä–æ–≤–µ—Ä—è–µ–º client_secret
            # –û–Ω–∏ –Ω–µ –¥–æ–ª–∂–Ω—ã –µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å, –Ω–æ –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            pass
        else:
            return jsonify({"error": "invalid_client"}), 401

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if code not in authorization_codes:
            return jsonify({"error": "invalid_grant"}), 401

        code_data = authorization_codes[code]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–¥–∞
        if code_data["expires_at"] < time.time():
            del authorization_codes[code]
            return jsonify({"error": "invalid_grant"}), 401

        if code_data["client_id"] != client_id:
            return jsonify({"error": "invalid_grant"}), 401

        # üîê –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–ê–Ø PKCE –ü–†–û–í–ï–†–ö–ê –î–õ–Ø –í–°–ï–• –ö–õ–ò–ï–ù–¢–û–í
        if code_data.get("code_challenge"):
            if not code_verifier:
                return jsonify({
                    "error": "invalid_grant",
                    "error_description": "code_verifier required for PKCE"
                }), 400

            if not validate_pkce(code_verifier, code_data["code_challenge"], code_data["code_challenge_method"]):
                return jsonify({
                    "error": "invalid_grant",
                    "error_description": "PKCE verification failed"
                }), 400

        # –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥
        del authorization_codes[code]

        # –°–æ–∑–¥–∞—ë–º —Ç–æ–∫–µ–Ω
        token = generate_token()
        tokens[token] = {
            "client_id": client_id,
            "user_id": code_data["user_id"],
            "scope": code_data["scope"],
            "expires_at": time.time() + 3600
        }

        return jsonify({
            "access_token": token,
            "token_type": "Bearer",
            "expires_in": 3600,
            "scope": " ".join(code_data["scope"])
        })

    else:
        return jsonify({"error": "unsupported_grant_type"}), 400


# –û—Å—Ç–∞–ª—å–Ω—ã–µ endpoints –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
@app.route("/verify_token", methods=["POST"])
def verify_token():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞"""
    token = request.form.get("token")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–æ–∑–≤–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
    if token in revoked_tokens:
        return jsonify({"valid": False, "reason": "revoked"}), 401

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
    if token not in tokens:
        return jsonify({"valid": False, "reason": "not_found"}), 401

    token_data = tokens[token]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
    if token_data["expires_at"] < time.time():
        revoked_tokens.add(token)  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∑—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ
        return jsonify({"valid": False, "reason": "expired"}), 401

    return jsonify({
        "valid": True,
        "client_id": token_data["client_id"],
        "user_id": token_data["user_id"],
        "scope": token_data["scope"]
    })


@app.route("/revoke", methods=["POST"])
def revoke_token():
    """–û—Ç–∑—ã–≤ —Ç–æ–∫–µ–Ω–∞"""
    data = request.form
    token = data.get("token")
    client_id = data.get("client_id")
    client_secret = data.get("client_secret")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    if client_id not in clients:
        return jsonify({"error": "invalid_client"}), 401

    # –î–ª—è confidential –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∫—Ä–µ—Ç
    if clients[client_id]["type"] == "confidential":
        if clients[client_id]["secret"] != client_secret:
            return jsonify({"error": "invalid_client"}), 401
    # –î–ª—è public –∫–ª–∏–µ–Ω—Ç–æ–≤ –ù–ï –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∫—Ä–µ—Ç

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
    if token not in tokens:
        return jsonify({"error": "invalid_token"}), 400

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
    if tokens[token]["client_id"] != client_id:
        return jsonify({"error": "token_belongs_to_another_client"}), 403

    # –û—Ç–∑—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω
    revoked_tokens.add(token)

    return jsonify({
        "message": "Token revoked successfully",
        "token": token[:10] + "..."
    })


@app.route("/admin/tokens", methods=["GET"])
def admin_tokens():
    """–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞–º–∏"""
    # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    auth_header = request.headers.get("Authorization")
    if not auth_header or not auth_header.startswith("Bearer "):
        return "üîí –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", 401

    token = auth_header.replace("Bearer ", "")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –∏ –ø—Ä–∞–≤–∞
    if token not in tokens or "admin_panel" not in tokens[token]["scope"]:
        return "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", 403

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    tokens_list = []
    for token_key, token_data in list(tokens.items())[:20]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥
        tokens_list.append((token_key, token_data))

    return render_template_string(
        ADMIN_TEMPLATE,
        active_count=len(tokens),
        revoked_count=len(revoked_tokens),
        tokens_list=tokens_list
    )


@app.route("/admin/revoke", methods=["POST"])
def admin_revoke():
    """–û—Ç–∑—ã–≤ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    token = request.form.get("token")

    if token and token in tokens:
        revoked_tokens.add(token)
        return redirect("/admin/tokens")

    return "‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", 404


@app.route("/cleanup", methods=["POST"])
def cleanup():
    """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ (–¥–ª—è cron-–∑–∞–¥–∞—á)"""
    now = time.time()
    expired_count = 0

    for token, data in list(tokens.items()):
        if data["expires_at"] < now:
            revoked_tokens.add(token)
            del tokens[token]
            expired_count += 1

    # –û—á–∏—â–∞–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∫–æ–¥—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    for code, data in list(authorization_codes.items()):
        if data["expires_at"] < now:
            del authorization_codes[code]

    return jsonify({
        "message": "Cleanup completed",
        "expired_tokens_removed": expired_count
    })


if __name__ == "__main__":
    app.run(port=5000, debug=True)