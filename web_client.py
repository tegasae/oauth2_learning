from flask import Flask, request, redirect, url_for, session, render_template_string
import requests
import secrets

app = Flask(__name__)
app.secret_key = secrets.token_hex(16)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
AUTH_SERVER = "http://127.0.0.1:5000"
RESOURCE_API = "http://127.0.0.1:5001"
CLIENT_ID = "web_app"
CLIENT_SECRET = "web_secret_123"
REDIRECT_URI = "http://127.0.0.1:5003/callback"

# HTML —à–∞–±–ª–æ–Ω—ã
SCOPE_SELECTION_TEMPLATE = """
<!DOCTYPE html>
<html>
<head>
    <title>–í—ã–±–æ—Ä –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞</title>
    <meta charset="utf-8">
    <style>
        body { 
            font-family: Arial, sans-serif; 
            max-width: 600px; 
            margin: 50px auto; 
            padding: 20px;
        }
        .form-group { 
            margin: 15px 0; 
        }
        label { 
            display: block; 
            margin-bottom: 5px; 
            font-weight: bold;
        }
        .checkbox-group {
            margin: 10px 0;
        }
        input[type="checkbox"] {
            margin-right: 10px;
        }
        button { 
            background: #007bff; 
            color: white; 
            padding: 12px 24px; 
            border: none; 
            border-radius: 4px; 
            cursor: pointer;
            font-size: 16px;
        }
        button:hover {
            background: #0056b3;
        }
        .info-box {
            background: #f8f9fa;
            padding: 15px;
            border-radius: 5px;
            margin: 20px 0;
            border-left: 4px solid #007bff;
        }
    </style>
</head>
<body>
    <h2>üîê –í—ã–±–æ—Ä –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞</h2>

    <div class="info-box">
        <p>–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–∏–µ –ø—Ä–∞–≤–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é:</p>
    </div>

    <form method="post" action="/request_auth">
        <input type="hidden" name="required_scope" id="required_scope">

        <div class="checkbox-group">
            <label>
                <input type="checkbox" name="scope" value="read_data" checked>
                üìñ –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö (read_data)
            </label>
        </div>

        <div class="checkbox-group">
            <label>
                <input type="checkbox" name="scope" value="write_data">
                ‚úèÔ∏è –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö (write_data)
            </label>
        </div>

        <div class="checkbox-group">
            <label>
                <input type="checkbox" name="scope" value="admin_panel">
                ‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (admin_panel)
            </label>
        </div>

        <div class="form-group">
            <button type="submit">–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚Üí</button>
        </div>
    </form>

    <script>
        document.querySelector('form').addEventListener('submit', function(e) {
            const scopes = Array.from(document.querySelectorAll('input[name="scope"]:checked'))
                .map(input => input.value)
                .join(' ');
            document.getElementById('required_scope').value = scopes;
        });
    </script>
</body>
</html>
"""

DASHBOARD_TEMPLATE = """
<!DOCTYPE html>
<html>
<head>
    <title>–î–∞—à–±–æ—Ä–¥</title>
    <meta charset="utf-8">
    <style>
        body { 
            font-family: Arial, sans-serif; 
            max-width: 800px; 
            margin: 50px auto; 
            padding: 20px;
        }
        .card {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 8px;
            margin: 20px 0;
            border-left: 4px solid #28a745;
        }
        .warning {
            background: #fff3cd;
            border-left: 4px solid #ffc107;
        }
        button {
            background: #007bff;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            margin: 5px;
        }
        button:disabled {
            background: #6c757d;
            cursor: not-allowed;
        }
        button:hover:not(:disabled) {
            background: #0056b3;
        }
        .danger {
            background: #dc3545;
        }
        .danger:hover {
            background: #c82333;
        }
        #result {
            margin-top: 20px;
            padding: 15px;
            background: #e9ecef;
            border-radius: 5px;
            min-height: 50px;
        }
    </style>
</head>
<body>
    <h2>üìä –î–∞—à–±–æ—Ä–¥</h2>

    <div class="card">
        <h3>üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</h3>
        <p><strong>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</strong> {{ user_id }}</p>
        <p><strong>–í—ã–¥–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∞:</strong> {{ granted_scope | join(', ') }}</p>
    </div>

    <div class="card">
        <h3>üöÄ –î–æ—Å—Ç—É–ø–Ω—ã–µ API</h3>
        <ul>
            {% for api in available_apis %}
            <li>{{ api }}</li>
            {% endfor %}
        </ul>
    </div>

    <div class="card">
        <h3>üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API</h3>
        <button onclick="testApi('/api/data')">–¢–µ—Å—Ç /api/data</button>
        <button onclick="testApi('/api/write')" {{ 'disabled' if 'write_data' not in granted_scope }}>–¢–µ—Å—Ç /api/write</button>
        <button onclick="testApi('/api/admin')" {{ 'disabled' if 'admin_panel' not in granted_scope }}>–¢–µ—Å—Ç /api/admin</button>

        <div id="result"></div>
    </div>

    <div class="card">
        <h3>‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</h3>
        <a href="/profile"><button>üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞–º–∏</button></a>
        <a href="/logout"><button class="danger">üö™ –í—ã–π—Ç–∏</button></a>
    </div>

    <script>
    async function testApi(endpoint) {
        const result = document.getElementById('result');
        result.innerHTML = '‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...';

        try {
            const response = await fetch('http://127.0.0.1:5001' + endpoint, {
                headers: {
                    'Authorization': 'Bearer {{ access_token }}'
                }
            });

            if (response.ok) {
                const data = await response.json();
                result.innerHTML = '<div style="color: green;">‚úÖ –£—Å–ø–µ—à–Ω–æ!</div><pre>' + 
                    JSON.stringify(data, null, 2) + '</pre>';
            } else {
                const errorText = await response.text();
                result.innerHTML = '<div style="color: red;">‚ùå –û—à–∏–±–∫–∞ ' + response.status + 
                    ': ' + errorText + '</div>';
            }
        } catch (error) {
            result.innerHTML = '<div style="color: red;">‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ' + error.message + '</div>';
        }
    }
    </script>
</body>
</html>
"""

PROFILE_TEMPLATE = """
<!DOCTYPE html>
<html>
<head>
    <title>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞–º–∏</title>
    <meta charset="utf-8">
    <style>
        body { 
            font-family: Arial, sans-serif; 
            max-width: 600px; 
            margin: 50px auto; 
            padding: 20px;
        }
        .token-box {
            background: #e9ecef;
            padding: 15px;
            border-radius: 5px;
            margin: 15px 0;
            font-family: monospace;
            word-break: break-all;
        }
        .danger {
            background: #dc3545;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }
        .danger:hover {
            background: #c82333;
        }
        .back-button {
            background: #6c757d;
            color: white;
            padding: 10px 20px;
            text-decoration: none;
            border-radius: 4px;
            display: inline-block;
        }
        .back-button:hover {
            background: #5a6268;
        }
    </style>
</head>
<body>
    <h2>üîë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞–º–∏</h2>

    <div>
        <h3>–¢–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω:</h3>
        <div class="token-box">
            {{ access_token }}
        </div>
    </div>

    <div style="margin: 20px 0;">
        <h3>‚ö†Ô∏è –û–ø–∞—Å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</h3>
        <form method="post" action="/revoke_my_token" onsubmit="return confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã? –≠—Ç–æ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç –≤–∞—à—É —Å–µ—Å—Å–∏—é.');">
            <button type="submit" class="danger">üö´ –û—Ç–æ–∑–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω</button>
        </form>
        <p style="color: #666; font-size: 14px; margin-top: 10px;">
            –û—Ç–∑—ã–≤ —Ç–æ–∫–µ–Ω–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç –≤—Å–µ –≤–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏.
        </p>
    </div>

    <div style="margin-top: 30px;">
        <a href="/dashboard" class="back-button">‚Üê –ù–∞–∑–∞–¥ –∫ –¥–∞—à–±–æ—Ä–¥—É</a>
    </div>
</body>
</html>
"""


@app.route("/")
def home():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –≤—ã–±–æ—Ä–æ–º scope"""
    return SCOPE_SELECTION_TEMPLATE


@app.route("/request_auth", methods=["POST"])
def request_auth():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ scope –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é"""
    requested_scope = request.form.get("required_scope", "read_data")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–µ scope –≤ —Å–µ—Å—Å–∏–∏
    session["requested_scope"] = requested_scope

    # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º scope
    auth_url = (
        f"{AUTH_SERVER}/authorize?"
        f"response_type=code&"
        f"client_id={CLIENT_ID}&"
        f"redirect_uri={REDIRECT_URI}&"
        f"scope={requested_scope}"
    )

    return redirect(auth_url)


@app.route("/callback")
def callback():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    code = request.args.get("code")
    if not code:
        return "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–¥", 400

    # –û–±–º–µ–Ω–∏–≤–∞–µ–º code –Ω–∞ —Ç–æ–∫–µ–Ω
    try:
        token_response = requests.post(
            f"{AUTH_SERVER}/token",
            data={
                "grant_type": "authorization_code",
                "code": code,
                "client_id": CLIENT_ID,
                "client_secret": CLIENT_SECRET,
                "redirect_uri": REDIRECT_URI
            },
            timeout=10
        )

        if token_response.status_code != 200:
            return f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω: {token_response.text}", 403

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ —Å–µ—Å—Å–∏–∏
        token_data = token_response.json()
        session["access_token"] = token_data["access_token"]
        session["granted_scope"] = token_data.get("scope", "").split()

        return redirect(url_for("dashboard"))

    except requests.exceptions.RequestException as e:
        return f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}", 500


@app.route("/dashboard")
def dashboard():
    """–î–∞—à–±–æ—Ä–¥ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–∞–≤–∞—Ö –¥–æ—Å—Ç—É–ø–∞"""
    if "access_token" not in session:
        return redirect(url_for("home"))

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º user_id –∏–∑ —Ç–æ–∫–µ–Ω–∞ (–∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É auth-—Å–µ—Ä–≤–µ—Ä–∞)
    try:
        token_info_response = requests.post(
            f"{AUTH_SERVER}/verify_token",
            data={"token": session["access_token"]},
            timeout=5
        )

        if token_info_response.status_code == 200:
            token_info = token_info_response.json()
            user_id = token_info.get("user_id", "unknown")
        else:
            user_id = "unknown"
    except:
        user_id = "unknown"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ API –¥–æ—Å—Ç—É–ø–Ω—ã —Å —Ç–µ–∫—É—â–∏–º–∏ scope
    available_apis = []
    granted_scope = session.get("granted_scope", [])

    if "read_data" in granted_scope:
        available_apis.append("üìñ –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö (/api/data)")
    if "write_data" in granted_scope:
        available_apis.append("‚úèÔ∏è –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö (/api/write)")
    if "admin_panel" in granted_scope:
        available_apis.append("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (/api/admin)")

    return render_template_string(
        DASHBOARD_TEMPLATE,
        access_token=session["access_token"],
        granted_scope=granted_scope,
        available_apis=available_apis,
        user_id=user_id
    )


@app.route("/profile")
def profile():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞–º–∏"""
    if "access_token" not in session:
        return redirect(url_for("home"))

    return render_template_string(
        PROFILE_TEMPLATE,
        access_token=session["access_token"]
    )


@app.route("/revoke_my_token", methods=["POST"])
def revoke_my_token():
    """–û—Ç–∑—ã–≤ —Ç–µ–∫—É—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if "access_token" not in session:
        return redirect(url_for("home"))

    token = session["access_token"]

    try:
        # –û—Ç–∑—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω
        response = requests.post(
            f"{AUTH_SERVER}/revoke",
            data={
                "token": token,
                "client_id": CLIENT_ID,
                "client_secret": CLIENT_SECRET
            },
            timeout=5
        )

        if response.status_code == 200:
            session.clear()
            return """
            <!DOCTYPE html>
            <html>
            <head>
                <title>–¢–æ–∫–µ–Ω –æ—Ç–æ–∑–≤–∞–Ω</title>
                <meta charset="utf-8">
                <style>
                    body { font-family: Arial, sans-serif; max-width: 500px; margin: 100px auto; text-align: center; }
                    .success { color: #28a745; font-size: 24px; }
                </style>
            </head>
            <body>
                <div class="success">‚úÖ</div>
                <h2>–¢–æ–∫–µ–Ω –æ—Ç–æ–∑–≤–∞–Ω</h2>
                <p>–í–∞—à —Ç–æ–∫–µ–Ω –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–æ–∑–≤–∞–Ω. –í—Å–µ —Å–µ—Å—Å–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã.</p>
                <p><a href="/">–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é</a></p>
            </body>
            </html>
            """
        else:
            return f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∑—ã–≤–∞ —Ç–æ–∫–µ–Ω–∞: {response.text}", 500

    except requests.exceptions.RequestException as e:
        return f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}", 500


@app.route("/logout")
def logout():
    """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã (–±–µ–∑ –æ—Ç–∑—ã–≤–∞ —Ç–æ–∫–µ–Ω–∞)"""
    session.clear()
    return redirect(url_for("home"))


if __name__ == "__main__":
    app.run(port=5003, debug=True)